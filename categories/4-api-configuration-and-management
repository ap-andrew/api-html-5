<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Apigee API Reference</title>
    <meta content="authenticity_token" name="csrf-param" />
<meta content="28ucJ88VIpdT82pjOVF0Ix+qd+vcPjEWJ9U9a2N0law=" name="csrf-token" />
    <link href="/assets/application-96f9052ab1868e53bd357cfbf8b7889f.css" media="all" rel="stylesheet" type="text/css" />

	<link rel="shortcut icon" href="http://apigee.com/sites/default/files/apigee_favicon.ico">
       <link href="/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />
       <link href="images/apple-touch-icon.png" rel="apple-touch-icon">
       <link href="images/apple-touch-icon-72x72.png" rel="apple-touch-icon" sizes="72x72">
       <link href="images/apple-touch-icon-114x114.png" rel="apple-touch-icon" sizes="114x114">
  </head>


  <body>



    <div class="container">
      <div class="content">
        <div class="row">
           <div class="span12">
			<!-- <div>
</div> -->
            <h1>API Configuration and Management</h1>
<table>
<tr>
<td><a href="/api_resources/3-api-products">API Products</a></td>
</tr>
<tr>
<td><a href="/api_resources/1-apis">APIs</a></td>
</tr>
<tr>
<td><a href="/api_resources/10-debug-sessions">Debug Sessions</a></td>
</tr>
<tr>
<td><a href="/api_resources/36-deployments">Deployments</a></td>
</tr>

Apigee Enterprise API enables developers to create, modify, deploy, and debug the behavior of APIs.
<p>
<h4>APIs and API proxies</h4>
To get the hang of the Apigee Enterprise API, it's important to understand APIs and API proxies.
<p>
In Apigee, an API facade is a management construct. You use APigee to provision and configure an API. Then you manage and monitor that API. You script, apply policies to, and configure your API to modify its behavior and to monitor its usage and performance. To do this, you use Apigee to collect analytics on your API, create API products, and provision access to apps and developers.
<p>
The behavior or an API facade is implemented in an API proxy. An API proxy defines the configuration and code for the processing flow that you define for managing your API.
<p>
Apigee gives you the flexbility to do this via a UI or an API. Using the Apigee API, you can create API proxies remotely, you can download API proxies generated by Apigee, or you can import API proxies that you build from scratch. This is useful if you want to, for example, edit the API proxy configurations locally, in your favorite editor, and then import the API proxy into Apigee for deployment and testing.
<p>

Apigee defines a flow processing model that determines how request and response flows are managed. The flow is the primary construct within an API proxy.
<p>
 An API proxy is a bundle of configurations (and sometimes your scripts and code) that define the behavior of those flows, and by extension the behavior of your API. API proxies are responsible for routing, transforming, securing, and otherwise treating the requests issued by apps to your API, and the responses that flow back to those apps.
<p>

An API proxy consists of:
<p>

Flows: The sequence of processing steps and policies to execute for the request/response flow.<p>

Policy Steps: The policy configurations to be executed.
<p>

Endpoints: Every API proxy must define a proxy endpoint and a target endpointâ€”the entry and exit points for app requests and responses.
<p>

Resources: Not to be confused with RESTful resources, these are JavaScript scripts, Python scripts, or XSLT files that may be attached to the flow as part of a policy processing step. 
<p>

<h4>Versions and Revisions</h4>
Because each API proxy is a bundle of code and configuration, Apigee needs to keep track of the update history for each package. When you add or remove a policy, for example, Apigee needs to update the API proxy without necessarily modifying the API signature as exposed to developers.
<p>
Version describes an API Interface versions, for example api.company.com/v1 and api.company.com/v2.
<p>
We use the term revision to describe API proxies. For any given API you might find yourself working with api.company.com/v2, implemented in revision 4 of the API proxy.
<p>

This becomes important as you deploy and update your changes. For any given API, you will have multiple revisions, each of which can be deployed to the test or prod environments. 

<h4>Deployments and environments</h4>
API proxies always execute in the context of an environment. In fact, until you deploy the API proxy, your API won't be accessible through Apigee Enterprise. Every organization in Apigee is provided with two environments, with the default names test and prod.
<p>

You can specify which revision of an API proxy is deployed in an environment. In a simple scenario, you might have revision 10 of API proxy running in the prod environment while you work on revision 11 of the API proxy in the test environment.
<p>

By default, the latest revision is deployed. However, you can at any time deploy any revision to either environment. Usually, you will want to establish a procedure for deploying revisions, which may involve regression testing, approvals checklists, and so on. 

<!-- <a href="/categories/4-api-configuration-and-management/edit">Edit</a> | -->
<!-- <a href="/categories/4-api-configuration-and-management" class="btn btn-mini" data-confirm="Are you sure?" data-method="delete" rel="nofollow">Delete</a></div> -->
<a href="/categories">Back</a>
            </div>
        </div><!--/row-->
      </div><!--/content-->

       <!-- <footer>
        <p>&copy; Apigee, Inc. 2012</p>
      </footer>  -->

    </div> <!-- /container -->

    <!-- Placed at the end of the document so the pages load faster -->
     <script src="/assets/application-3acbc888ea1a902e92db3f484dfc60e4.js" type="text/javascript"></script> 

  </body>
</html>
